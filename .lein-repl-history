(defn sum-f [f g x]
  (+ (f x) (g x)))
(sum-f inc dec 4)
(sum-f inc identity 4)
(sum-f inc identity 5)
(defn sum-f [f g x]
(defn equal-to [n]
  (fn [x] (= x n)))
(filter (equal-to 3) [1 2 3 4 5])
(filter (equal-to 3) [1 2 3 3 4 5])
(defn set->predicate [a-set]
  (fn [x] (if (contains? a-set x) true false)))
(filter (set->predicate #{1 2 3}) [0 2 4 6])
(filter (set->predicate #{1 2 3 nil}) [0 2 4 6 nil])
(filter (set->predicate #{1 2 3 nil}) [0 2 4 6 nil nil])
(defn pred-and [pred1 pred2]
  (fn [x] (and (pred1 x) (pred2 x))))
(filter (pred-and pos? even?) [1 2 -4 0 6 7 3])
(filter (pred-and pos? odd?) [1 2 -4 0 6 7 3])
(filter (pred-and (complement nil?) empty?) [[] '() nil {} #{}])
(defn pred-or [pred1 pred2]
  (fn [x] (or (pred x) (pred2 x))))
(filter (pred-and (complement nil?) empty?) [[] '() nil {} #{}])
(defn pred-or [pred1 pred2]
  (fn [x] (or (pred1 x) (pred2 x))))
(filter (pred-or pos? odd?) [1 2 -4 0 6 7 -3])
exit
(use 'predicates)
(filter (equal-to 2) [2 1 3 2.0])
exit
(pos? 0)
(pos? 1)
(pos?)
pos?
doc pos?
(doc pos?)
exit
(complement neg? -2)
((complement neg?) -2)
(defn my-some [pred a-seq] (pred a-seq))
(my-some even? [1 2 3 4])
(even? [1 2 3 4])
(defn my-some [pred a-seq]  (some pred a-seq))
(my-some even? [1 2 3 4])
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (not (some pred a-seq) "falsey" true ))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (if (not (some pred a-seq)) "falsey"  ))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (if (not (some pred a-seq)) falsey  ))
(defn my-some [pred a-seq]  (if (not (some pred a-seq)) false true  ))
(my-some even? [1 3 5 7])
(my-some neg? [1 3 5 7])
(my-some neg? [1 3 5 7 -1])
(my-some neg? [])
(my-some first? [[false][1]])
(defn my-some [pred a-seq]  (map pred a-seq))
(my-some first? [[false][1]])
(my-some first [[false][1]])
(defn my-some [pred a-seq]  (map pred a-seq))
(my-some first [[false][]])
(defn my-some [pred a-seq]  (filter (not nil?  map pred a-seq)))
(my-some first [[false][]])
(defn my-some [pred a-seq]  (filter (not nil? ( map pred a-seq))))
(my-some first [[false][]])
(defn my-some [pred a-seq]  (filter (complement nil? ( map pred a-seq))))
(my-some first [[false][]])
(defn my-some [pred a-seq]  (filter (complement nil?) ( map pred a-seq)))
(my-some first [[false][]])
(defn my-some [pred a-seq]  (filter (complement nil?) ( map pred a-seq)))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (not? nil?) (filter (complement nil?) ( map pred a-seq))))
(defn my-some [pred a-seq]  (filter (not nil?) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (not nil?) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (not nil?) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter not nil? (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter not nil? (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (fn [x] (not nil? x)) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (fn [x] (not (nil? x))) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))) false true))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))) false true))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))) false true))
(doc empty?)
(defn my-some [pred a-seq]  (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))) true))
(doc empty?)
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (not (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))) true false))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (not (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))) true false))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (not (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))))))
(my-some even? [1 3 5 7])
(my-some first [1 3 5 7])
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (not (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))))))
(my-some first [1 3 5 7])
(map first [1 3 5 7]_
(map first [1 3 5 7])
(map (first [1 3 5 7]))
(first [1 3 4])
(map (first [1 3 5 7]))
(defn my-some [pred a-seq]  (not (empty? (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))))))
(some first [1 2 3 4])
(my-some first [ [false] [1]])
(my-some first [ [false] []])
(my-some nil? [ [false] []])
(my-some nil? [1 2])
(my-some nil? [1 nil 2])
(my-some nil? [ [false] [1]])
(my-some first [ [false] [1]])
(defn my-some [pred a-seq]  (if (not (empty? ( (let [map_values filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))))])))
(defn my-some [pred a-seq]  (if (not (empty? (let [map_values (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)])))))))
(defn my-some [pred a-seq]  (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq))))
(my-some first [ [false] [1]])
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))]))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (result)))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (str result)))
(my-some even? [1 3 5 7])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (apply str result)))
(my-some even? [1 3 5 7])
(my-some nil? [1 3 5 7])
(my-some even? [1 3 5 7 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (result)))
(my-some even? [1 3 5 7 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (-> result)))
(my-some even? [1 3 5 7 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (-> result)))
(my-some nil? [1 3 5 7])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (empty? result false true)))
(my-some nil? [1 3 5 7])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (empty? (result false true))))
(my-some nil? [1 3 5 7])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (nil? result)))
(my-some nil? [1 3 5 7])
(my-some first [[false] [1]])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (-> result))))
(my-some first [[false] [1]])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (apply str result))))
(my-some first [[false] [1]])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (apply str result))))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (str result))))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (str result)))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (str result))))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false result))))
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false result)))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (identity result)))
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (identity result))))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (pred result))))
(my-some neg? [1 3 5 0 7 -1 8])
(doc neg?)
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false result)))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false ([[result]])))
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false ([[result]]))))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false ([a result]))))
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false ([[a result]]))))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (let [a result] (-> a)))))
(my-some neg? [1 3 5 0 7 -1 8])
(defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (let [[a &more] result] (-> a)))))
(my-some neg? [1 3 5 0 7 -1 8])
(my-some first [1 3 5 0 7 -1 8])
(my-some first [[false] [1]])
(my-some nil? [1 nil 2])
exit
 (defn my-some [pred a-seq]  (let [result (filter (fn [x] (not (false? x))) (filter (complement nil?) ( map pred a-seq)))] (if (nil? result) false (let [[a &more] result] (-> a)))))
(my-some pos? [1 2 3 4])
(my-every? pos? [1 2 3 4 0])
(my-some pos? [1 2 3 4 0])
(every? even? [])
(doc even?)
(type [])
( count [])
(even? 0)
(every? even? [])
(every? even? [0])
(every? even? [1])
(every? even? [])
(nil? [])
(count [])
(nil? [])
(map even? [])
(map odd? [])
((complement nil?) map even? [])
((complement nil?) (map even? []))
((complement nil?) (map even? [2 4 6]))
((complement nil?) (map even? [2 4 6 0]))
((complement nil?) (map even? [2 4 6 3 0]))
((complement nil?) (filter (not nil?) (map even? [2 4 6 3 0])))
(filter (not nil?) (map even? [2 4 6 3 0])))
(filter (not nil?) (map even? [2 4 6 3 0]))
(filter (not nil?) (map even? [2 4 6 3 0])
(filter (not nil?) (map even? [2 4 6 3 0]))
(filter (not nil? (map even? [2 4 6 3 0])))
(filter (complement nil?) (map even? [2 4 6 3 0]))
(filter (complement true?) (map even? [2 4 6 3 0]))
((complement true?) filter (complement true?) (map even? [2 4 6 3 0]))
((complement true?) (filter (complement true?) (map even? [2 4 6 3 0])))
((complement true?) (filter (complement true?) (map even? [2 4 6 3 ])))
((complement true?) (filter (complement true?) (map pos? [1 2 3 4 0])))
(empty? (filter (complement true?) (map pos? [1 2 3 4 0])))
(empty? (filter (complement true?) (map pos? [1 2 3 4 ])))
(empty? (filter (complement true?) (map even? [2 4 6])))
(empty? (filter (complement true?) (map even? [])))
(defn my-every? [pred a-seq] (empty? (filter (complement true?) (map pred a-seq)))
(defn my-every? [pred a-seq] (empty? (filter (complement true?) (map pred a-seq))))
(my-every? pos? [1 2 3 4])
(my-every? pos? [1 2 3 4 0])
exit
(defn prime? [n]
  (let [pred ...]
(defn prime? [n]
  (let [pred ...]
(defn prime? [n] ( let [pred (fn [x] (>(/ n x) 1
(/ 4 2)
(/ 4 3)
(quot 4 2)
(quot 4 3)
(quot 12 4)
(defn prime? [n] ( let [pred (fn [x] (> (quot  n x) 1))) (not (some pred (range 2 n))))
(defn prime? [n] ( let [pred (fn [x] (> (quot  n x) 1)))] (not (some pred (range 2 n))))
(defn prime? [n] ( let [pred (fn [x] (> (quot  n x) 1))] (not (some pred (range 2 n)))))
(prime? 3)
(prime? 8)
(prime? 10)
(filer prime? (range 2 50))
(filter prime? (range 2 50))
(prime? 17)
(defn prime? [n] ( let [pred (fn [x] (> (quot  n x) 1))] (not (some pred (range 2 n)))))
(doc mod)
(defn prime? [n] ( let [pred (fn [x] (> (mod  n x) 0))] (not (some pred (range 2 n)))))
(prime? 17)
(range 2 17)
(mod 17 13)
(defn prime? [n] ( let [pred (fn [x] (= (mod  n x) 0))] (not (some pred (range 2 n)))))
(mod 17 13)
(prime? 17)
(prime? 5)
(filter? prime? (range 2 50))
(filter prime? (range 2 50))
exit
