(defn apply-1 [f x]
(f x))
(apply-1 str 13)
(defn |> [f x]
(x f))
(defn |> [x f]
(f x))
(str "hello")
("hello"
|> str)
(|> "hello" str)
(defn sum-f [f g x]
(+ (f x) (g x)))
(sum-f inc dec 4)
(sum-f identity - 10)
(defn greater-than [n]
(fn [k] (> k n)))
(filter (greater-than 5) [4 5 6 0 9 2 12])
(defn less-than [n]
  (fn [k] (< k n)))
(defn equal-to [n]
  (fn [k] (== k n)))
(filter (less-than 3) [1 2 3 4 5])
(filter (less-than 4) [-2 12 3 4 0])
(filter (equal-to-2) [2 1 3 2.0])
(filter (equal-to 2) [2 1 3 2.0])
(filter (equal-to 2) [3 4 5 6])
(def graphic-novels [{:name "Yotsuba 1" :series "Yotsuba"}
                     {:name "Yotsuba 5" :series "Yotsuba"}
                     {:name "Persepolis"}
                     {:name "That Yellow Bastard" :series "Sin City"}
                     {:name "The Hard Goodbye" :series "Sin City"}
                     {:name "Maus"}
                     {:name "Solanin"}
                     {:name "Monster 3" :series "Monster"}])
(filter :series graphic-novels)
(defn key-predicate [a-key]
(fn [a-map] (contains? a-map a-key)))
(filter (key->predicate "Name") [{"Name" "Joe"} {"Blargh" 3}])
(defn key->predicate [a-key]
(fn [a-map] (contains? a-map a-key)))
(filter (key->predicate "Name") [{"Name" "Joe"} {"Blargh" 3}])
(filter #{1 2 3} [0 2 4 6])
(filter 
#{1 2 3 nil} [0 2 4 6 nil])
(defn set->predicate [a-set]
  (fn [x] (contains? a-set x)))
(filter (set->predicate #{1 2 3})
)
(filter (set->predicate #{1 2 3}) [0 2 4 6])
(filter (set->predicate #{1 2 3 nil}) [2 nil 4 nil 6])
(defn non-negatives [a-seq]
(let [non-negative? (fn [n] (not (neg? n)))]
(filter non-negative? a-seq)))
(non-negatives [1 -2 9 4 0 -100 2 0 2])
((complement neg?) -5)
((complement neg?) 0)
((complement neg?) 12)
(defn non-negatives [a-seq]
(filter (complement neg?) a-seq))
(filter (pred-and pos? even?) [1 2 -4 0 6 7 -3])
(use 'predicates)
(defn pred-and [pred1 pred2]
  (fn [x] (and (pred1 x) (pred2 x))))
(defn pred-or [pred1 pred2]
  (fn [x] (or (pred1 x) (pred2 x)))
)
(filter (pred-and pos? even?) [1 2 -4 0 6 7 -3])
(filter (pred-and (complement nil?) empty?) [[] '() nil {} ]
)
(filter (pred-or pos? even?) [1 2 -4 0 6 -3])
