(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def authors #{china, octavia, kay, dick, zelazny})
(def cities {:title "The City and the City" :authors #{china}
             :awards #{:locus, :world-fantasy, :hugo}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def lord-of-light {:title "Lord of Light", :authors #{zelazny}
                    :awards #{:hugo}})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(def ysabel {:title "Ysabel", :authors #{kay}, :awards #{:world-fantasy}})
(def scanner-darkly {:title "A Scanner Darkly" :authors #{dick}})
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly}])
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def authors #{china, octavia, kay, dick, zelazny})
(def cities {:title "The City and the City" :authors #{china}
             :awards #{:locus, :world-fantasy, :hugo}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def lord-of-light {:title "Lord of Light", :authors #{zelazny}
                    :awards #{:hugo}})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(def ysabel {:title "Ysabel", :authors #{kay}, :awards #{:world-fantasy}})
(def scanner-darkly {:title "A Scanner Darkly" :authors #{dick}})
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly}])
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly})
(:awards ysabel )
(defn has-award? [book award]
  (contains? (:awards book) award))
(has-award? ysabel :world-fantasy) ;=> true
(has-award? scanner-darkly :hugo)  ;=> false
(defn my-some [pred a-seq]
  ;;return true or false
  ;; not finished
  (first (sort (filter pred a-seq))))
(defn my-some [pred a-seq]
  ;;return true or false
  ;; not finished
  (first (sort (filter pred a-seq))))
(my-some whitespace? "gg gg")
(defn whitespace? [character]
  (Character/isWhitespace character))
(my-some whitespace? "gg gg")
(mod 2 4)
(mod 4 4)
(mod 4 2)
(defn my-some [pred a-seq]
  (let [filtered (filter pred a-seq)]
    ( map first filtered) ))
(= 1 true)
(= true true)
(true)
true
(def pred even?)
(pred 2)
 ( map (fn [x] ((when pred x) x) ) [2 3 5]
)
 ( map (fn [x] ((when pred x) x) ) [2 3 5])
[[1 1] [nil 3]]
(first [[1 1] [nil 3]])
(some? (first [[1 1] [nil 3]]))
(some? first [[1 1] [nil 3]])
(defn my-some [pred a-seq]
  (let [filtered (filter pred a-seq)]
    (if (> (count filtered) 0)
      (first filtered)
      false
      )))
(my-some even? [1 3 5 7])       ;=> falsey
(my-some even? [1 3 5 7 8])     ;=> true
(my-some neg? [1 3 5 0 7 8])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some neg? [])  
(map nil? [1 2 3])
(map first [1 2 3])
(map first [[1] 2 3])
(map first [[1 3] [2] [3 6]])
(map first [[1 3] [2] [3 6] nil])
(map first [[1 3] 2 [3 6] nil])
(map first [[false] [1]])
(sort (map first [[false] [1]]))
(sort (false false true 1))
(sort (false false true true))
(sort (1 1 false ))
(sort (1 1 6 ))
sort (1 1 6 )
sort (1 1 6)
(sort (1 1 6))
(sort 1 2)
(sort [1 2])
(sort [1 2 false])
(first [[false] [1]])
(map first [[false] [1]])
(filter first [[false] [1]])
(first (filter first [[false] [1]]))
(map first (filter first [[false] [1]]))
(defn my-some [pred a-seq]
  (let [res (first (map pred (filter pred a-seq)))]
    res))
(my-some first [[false] [1]])
(my-some even? [[false] [1]])
(defn my-some [pred a-seq]
  (let [res (first (map pred a-seq))]
    res))
(my-some even? [[false] [1]])
(defn my-some [pred a-seq]
  (let [res (first (filter pred a-seq))]
    res))
(my-some even? [[false] [1]])
(some #(= 5 %) [1 2 3 4 5])
(some? #(= 5 %) [1 2 3 4 5])
(some even? [1 2 3 4 5])
(some first [1 2 3 4 5])
(some first [[1] [2 7] 3 4 5])
(some first [[2 7] 3 4 5])
(defn my-some [pred a-seq]
  (let [filtered (filter (fn [x] ((not (nil? pred x)))) a-seq)]
    (if (filtered) (first filtered)
        false)
    ))
(nil? (first [4]))
(nil? (first 4))
(defn my-some [pred a-seq]
  (first (map pred a-seq)))
(my-some even? [[false] [1]])
(my-some first [[false] [1]])
(my-some first [ [1]])
(my-some first [ [1] false])
(my-some first [ [1] [false]])
(my-some even? [2 3 4])
(filter first [[false] [1]])
(map first (filter first [[false] [1]]))
(map even? (filter even? [[false] [1]]))
(map even? (filter even? [1 2]))
first ((map even? (filter even? [1 2])))
(first (true))
(map even? (filter even? [1 2]))
(first (map even? (filter even? [1 2])))
(first (map first (filter first [[1 2]])))
(first (map first (filter first [[1 2] [false false]])))
(first (map first (filter first [ [false false]])))
