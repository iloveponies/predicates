(use 'predicates)
has-award
has-award?
blank?
(use 'predicates)
my-every?
(my-every? pos? [1 2 3])
(every? pos? [1 2 3])
(my-every? pos? [1 2 3])
(use 'predicates :reload)
(my-every? pos? [1 2 3])
true?
(true?)
my-true?
prime?
(prime? 1)
(:reload)
:reload
(prime? 1)
3000000000
1234567890
99887766554433221100
99887766554433221100*9999999999999999999999
99887766554433221100*9999999999999999999999N
4234523453/3452345
234523452345/5
(* 234523452345234523452345 23452345234523452345234523452345)
(* 23452345234523452345234523452345234/3452345234523452345 34523452345234523452345234)
(*10000000000 20000000000)
(* 10000000000 20000000000)
(* 100000000000/7 2000000000000/3)
(* 10000000000/1 20000000000/1)
(* 20000000000/2 40000000000/2)
(* 20000000000N/2 40000000000N/2)
(* 2000000000000000/3 400000000000000/7)
(pow 3 3)
(^ 3 3)
power
pow
Math.pow
math
Math
Math.pow
(Math.pow 3 3)
(use 'predicates)
my-true?
prime?
(prime?)
(prime? 1)
(use 'predicates :reload)
(prime? 1)
(my-every? pos [1 2 3])
(my-every? pos? [1 2 3])
(my-every? pos? 1 2 3)
(my-every? pos? (1 2 3))
(my-every? pos? {1 2 3})
(my-every? pos? [1 2 3])
(use 'predicates :reload)
(my-every? pos? [1 2 3])
(my-every? pos? [1 -2 3])
(use 'predicates :reload)
(my-some? even? [1 3 5 7 9 11 12 13])
my-some?
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(my-some even? [3 4 2])
(my-some even? [2 4 6])
(use 'predicates :reload)
(my-some even? [2 4 6])
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(my-some even? [1 3 5 7])       ;=> falsey
(my-some even? [1 3 5 7 8])     ;=> true
(my-some neg? [1 3 5 0 7 8])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some neg? [])               ;=> falsey
(my-some first [[false] [1]])   ;=> 1
(my-some first [[false] []])    ;=> falsey
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
(use 'predicates :reload)
(my-some nil? [1 nil 2])        ;=> true
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
(use 'predicates :reload)
(my-some nil? [1 nil 2])        ;=> true
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
(my-some first [[false] [1]])   ;=> 1
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some even? [1 3 5 7 9 11 12 13])
help
(use 'predicates :reload)
(my-some even? [1 3 5 7 9 11 12 13])
(my-some first [[false] [1]])   ;=> 1
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some even? [1 3 5 7 8])     ;=> true
(my-some even? [1 3 5 7 9 11 12 13])
(my-every? pos? (1 2 3))
(my-some even? [1 3 5 7 8])     ;=> true
(my-every? pos? (1 2 3))
(my-every? pos? [1 2 3])
(use 'predicates :reload)
(my-some even? [1 3 5 7 8])     ;=> true
(use 'predicates :reload)
(my-some even? [1 3 5 7 8])     ;=> true
(use 'predicates :reload)
(my-some even? [1 3 5 7 8])     ;=> true
(:reload)
(use 'predicates :reload)
(my-some even? [1 3 5 7 8])     ;=> true
(use 'predicates :reload)
(my-some even? [1 3 5 7 8])     ;=> true
(my-some even? [1 3 5 7 6 8])    
(even? (6 8))
(even? #(6 8))
(even? [6 8))
(even? 8)
(use 'predicates :reload)
(my-some even? [1 3 5 7 6 8])    
(my-some even? [1 3 5 7 9 11 12 13])
(my-some even? [1 3 5 7 8])     ;=> true
(my-some even? [1 3 5 7])       ;=> falsey
(my-some even? [1 3 5 7 8])     ;=> true
(my-some neg? [1 3 5 0 7 8])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some neg? [])               ;=> falsey
(my-some first [[false] [1]])   ;=> 1
(my-some first [[false] []])    ;=> falsey
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
(use 'predicates :reload)
(my-some nil? [1 nil 2])        ;=> true
(my-some nil? [1 2])            ;=> falsey
(my-some first [[false] []])    ;=> falsey
(my-some first [[false] [1]])   ;=> 1
(my-some nil? [1 nil 2])        ;=> true
(map (my-some nil? [1 nil 2]))
(map nil? (my-some nil? [1 nil 2]))
(first ((map nil? (my-some nil? [1 nil 2])))
d
1
nil
)
(first ((map nil? (my-some nil? [1 nil 2]))))
(first ((filter nil? (my-some nil? [1 nil 2]))))
(map nil? (my-some nil? [1 nil 2]))
(map even? (my-some even? [1 2 3 4]))
(filter even? (my-some even? [1 2 3 4]))
(first (filter even? (my-some even? [1 2 3 4])))
(first (filter even? (my-some nil? [1 2 nil 4])))
(first (filter nil? (my-some nil? [1 2 nil 4])))
(first (filter even? (my-some even? [1 2 3 4])))
(first (filter (not false) (my-some even? [1 2 3 4])))
(use 'predicates)
prime
(prime 3)
(source prime)
quit
has-award?
lein
lein help
quit
(prime? 1)
prime?
prime
quit
(use 'predicates)
prime?
(prime? 1)
(prime? 0)
(use 'predicates :reload)
(prime? 1.1)
(prime? -1)
(use 'predicates :reload)
(prime? -1)
(use 'predicates :reload)
(prime? -1)
(use 'predicates :reload)
(prime? -1)
(prime? l)
(prime? 1.1)
(prime? 2/1)
(prime? 2/3)
(number? f)
(number? 3)
(number? 1)
number?
(number? a)
(number? "a")
(def a (1))
def
(def a (1))
(defn a (1))
(def a 1)
(number? a)
(def b "not a number")
(number? b)
(use 'predicates :reload)
(prime? "s")
(prime? b)
(prime? a)
(prime? 1.1)
(prime? -1)
(prime? 1.1)
(prime? a)
(prime? 0)
(use 'predicates :reload)
(prime? 1)
(integer? 1)
(integer? b)
(use 'predicates :reload)
(integer? b)
(pos? b)
(use 'predicates :reload)
(prime? b)
(prime? a)
(prime? -1)
(prime? -1.1)
(prime? 1/7)
(prime? 1)
(use 'predicates :reload)
(prime? 1)
(prime? 2)
(prime? 3)
(prime? 4)
(prime? -1)
(prime? b)
(even? "a")
(use 'predicates :reload)
(prime? 1)
(prime? -1)
(prime? 0)
(prime? 1.1)
(prime? "a")
(prime? 13)
(prime? 12)
(prime? 4) ;=> false
(prime? 7) ;=> true
(prime? 10) ;=> false
(filter prime? (range 2 50)) ;=> (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47)
(filter prime? (range 1 50)) ;=> (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47)
(filter prime? (range 1 10000))
(my-every? pos? [1 2 3 4])   ;=> true
(my-every? pos? [1 2 3 4 0]) ;=> false
(my-every? even? [2 4 6])    ;=> true
(my-every? even? [])         ;=> true
(my-some even? [1 3 5 7])       ;=> falsey
(my-some even? [1 3 5 7 8])     ;=> true
(my-some neg? [1 3 5 0 7 8])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some neg? [])               ;=> falsey
(my-some first [[false] [1]])   ;=> 1
(my-some first [[false] []])    ;=> falsey
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
(use 'predicates :reload)
my-some
(my-some even? [1 3 5 7])       ;=> falsey
(my-some even? [1 3 5 7 8])     ;=> true
(my-some neg? [1 3 5 0 7 8])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some neg? [])               ;=> falsey
(my-some first [[false] [1]])   ;=> 1
(my-some first [[false] []])    ;=> falsey
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
(use 'predicates :reload)
(my-some even? [1 3 5 7])       ;=> falsey
(my-some even? [1 3 5 7 8])     ;=> true
(my-some neg? [1 3 5 0 7 8])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some neg? [])               ;=> falsey
(my-some first [[false] [1]])   ;=> 1
(my-some first [[false] []])    ;=> falsey
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
(use 'predicates :reload)
(my-some even? [1 3 5 7])       ;=> falsey
(my-some even? [1 3 5 7 8])     ;=> true
(my-some neg? [1 3 5 0 7 8])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some neg? [])               ;=> falsey
(my-some first [[false] [1]])   ;=> 1
(my-some first [[false] []])    ;=> falsey
(my-some nil? [1 2])            ;=> falsey
(my-some nil? [1 nil 2])        ;=> true
lein midje
quit
(true? 1)
(true?)
true?
(true? (odd? 1))
(true? (odd? 2))
(use 'predicates)
(prime? 1)
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(use 'predicates :reload)
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(use 'predicates :reload)
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some first [[false] []])    ;=> falsey
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some first [[false] [1]])   ;=> 1
(use 'predicates :reload)
(my-some first [[false] [1]])   ;=> 1
(use 'predicates :reload)
(my-some first [[false] [1]])   ;=> 1
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(use 'predicates :reload)
(my-some neg? [1 3 5 0 7 -1 8]) ;=> true
(my-some first [[false] [1]])   ;=> 1
(use 'predicates :reload)
(my-some first [[false] [1]])   ;=> 1
quit
(use 'predicates)
quit
