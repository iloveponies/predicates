(first [[1]])
(first [1])
(seq(first [1]))
(first [[[3]]])
(list?(first [[[3]]]))
(seq?(first [[[3]]]))
(doc list?)
(doc seq?)
(seq?(first [[[3]]]))
(coll?(first [[[3]]]))
(doc =)
(doc ==)
(contains? #{1 2 3 nil} 2)
(contains? #{1 2 3 nil} nil)
(contains? #{1 2 3 nil} 99)
(odd [1 2 3 4])
(odd? [1 2 3 4])
(def ysabel {:title "Ysabel", :authors #{kay}, :awards #{:world-fantasy}})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def ysabel {:title "Ysabel", :authors #{kay}, :awards #{:world-fantasy}})
(:awards ysabel)
(contains? (:awards ysabel) xx)
(contains? (:awards ysabel) "xx")
(defn has-award? [book award]                   |                  :points 1} 
  (contains? (:awards book)award ))             |  (my-some even? [1 3 5 7])       => falsey
                                                |  (my-some even? [1 3 5 7 8])     => true
(defn HAS-ALL-THE-AWARDS? [book awards]         |  (my-some neg? [1 3 5 0 7 8])    => falsey
  (every? (fn [award] has-award? book award) awa|  (my-some neg? [1 3 5 0 7 -1 8]) => true       
rds))  
                                                
(defn has-award? [book award]                   
  (contains? (:awards book)award ))             
                                                
(defn HAS-ALL-THE-AWARDS? [book awards]         
  (every? (fn [award] has-award? book award) awards))
(contains? (:awards ysabel) "xx")
(HAS-ALL-THE-AWARDS? ysabel #{2})
(has-award? ysabel "2")
(even? [1 3])
(map even? [1 3])
(filter even? [1 3])
(filter even? [1 2 3])
(first(filter even? [1 3]))
(first(filter even? [1 2 3]))
(count(filter even? [1 2 3]))
(count(filter even? [1  3]))
(count(filter even? [1 2 3]))
(first(filter even? [1 2 3]))
(first(filter even? [1  3]))
(count(filter even? [1 2 3]))
(map even? [1 3])
(first(filter even? [1  3]))
(count(filter even? [1 2 3 8]))
(count(map even? [1 2 3 8]))
(first(map even? [1 2 3 8]))
(first(map first [1 2 3 8]))
(map first [1 2 3 8])
(first(map first [[1] 2 3 8]))
( first [1 2 3 8])
(first(map first [[1] 2 3 8]))
(first(map even? [[1] 2 3 8])
)
(first(map even? [[1] 2 3 8]))
(first(map even? [1 2 3 8]))
(map even? [1 2 3 8]))
(first(filter even? [1 2 3 8]))
(filter even? [1 2 3 8]))
(filter even? [1 2 3 8])
(map even? [1 2 3 8])
(contains? (map even? [1 2 3 8]) true)
(contains? true (map even? [1 2 3 8]))
(contains? (map even? [1 2 3 8]) true)
(filter true (map even? [1 2 3 8])
)
(map even? [1 2 3 8])
(filter even? [1 2 3 8])
(map even? [1 2 3 8])
(filter(map even? [1 2 3 8]))
(filter (= true (map even? [1 2 3 8])))
(map even? [1 2 3 8])
(filter (fn [b] (= b true)) (map even? [1 2 3 8]))
(first(filter (fn [b] (= b true)) (map even? [1 2 3 8])))
(first(filter (fn [b] (= b true)) (map even? [[false] [1]])))
(first(filter (fn [b] (= b true)) (map first [[false] [1]])))
(first(filter (fn [b] (not b false)) (map first [[false] [1]])))
(first(filter (fn [b] (not = b false)) (map first [[false] [1]])))
(first(filter (fn [b] (not(= b false))) (map first [[false] [1]])))
(map even? [1 2 4 8])
(first(filter (fn [b] (= b false) (map first [[false] [1]])))
)
(first(filter (fn [b] (= b false)) (map first [[false] [1]])))
(first(filter (fn [b] (= b false)) (map even? [[false] [2 4]])))
(first(filter (fn [b] (= b false)) (map even? [2 4 6])))
(filter (fn [b] (= b false)) (map even? [2 4 6]))
(first(filter (fn [b] (= b false)) (map first [[false] [1]])))
(first(filter (fn [b] (= b false)) (map even? [2 4 6])))
(complement(first(filter (fn [b] (= b false)) (map even? [2 4 6]))))
(first(filter (fn [b] (= b false)) (map even? [2 4 6])))
(doc complement)
(first(filter (fn [b] (= b false)) (map first [[false] [1]])))
(first(filter (fn [b] (= b false)) (map even? [2 4 6])))
(first(filter (fn [b] (= b true)) (map even? [2 4 6])))
(filter (fn [b] (= b true)) (map even? [2 4 6]))
(filter (fn [b] (= b false)) (map even? [2 4 6]))
(filter (fn [b] (= b false)) (map even? [2 1 6]))
(filter (fn [b] (= b false)) (map even? [2 4 6]))
(filter (fn [b] (= b false)) (map even? [2 4 3 6]))
(filter (fn [b] (= b false)) (map even? [2 4 6]))
(filter (fn [b] (= b false)) (map (complenent even?) [2 4 6]))
(filter (fn [b] (= b false)) (map (complement even?) [2 4 6]))
(filter (fn [b] (= b false)) (map even? [2 4 6]))
(filter (fn [b] (= b false)) (map even? [2 4 3 6]))
(filter (fn [b] (= b false)) (map even? [2 4 6]))
(first(filter (fn [b] (= b false)) (map even? [2 4 6])))
(filter (fn [b] (= b false)) (map even? [2 4 6]))
(empty?(filter (fn [b] (= b false)) (map even? [2 4 6])))
(empty?(filter (fn [b] (= b false)) (map even? [2 4 9 6])))
(empty?(filter (fn [b] (= b false)) (map pos? [2 4 9 0])))
(doc some)
(apropos remainder)
(apropos "remainder")
(apropos "mod")
(doc mod)
(mod 10 4)
(mod  4 10)
(mod 10 4)
(mod 10 2)
(== (mod 10 2) 0)
(sqrt)
(apropos "root")
(doc root)
(root 4)
