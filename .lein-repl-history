(use 'midje.repl)
(autotest)
(check-facts :all)
(doc dec)
(check-facts :all)
(filter #{1 2 3} [1 2 3 4])
(contains? #{1 2 3} 1)
(contains? #{1 2 3} 2)
(contains? #{1 2 3} 5)
(contains? #{1 2 3 nil} nil)
(contains? #{1 2 3 nil} false)
(contains? #{1 2 3 nil} 2)
(contains? #{1 2 3 nil} 8)
(check-facts :all)
(use 'predicates)
(filter (set->predicate #{1 2 3})     [0 2 4 6])
(filter (set->predicate #{1 2 3 nil}) [2 nil 4 nil 6])
(check-facts :all)
(filter (pred-and pos? even?) [1 2 -4 0 6 7 -3])
(filter (pred-and pos? odd?) [1 2 -4 0 6 7 -3])
(check-facts :all)
(def china {:name "China Mi√©ville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def authors #{china, octavia, kay, dick, zelazny})
(def cities {:title "The City and the City" :authors #{china}
             :awards #{:locus, :world-fantasy, :hugo}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def lord-of-light {:title "Lord of Light", :authors #{zelazny}
                    :awards #{:hugo}})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(def ysabel {:title "Ysabel", :authors #{kay}, :awards #{:world-fantasy}})
(def scanner-darkly {:title "A Scanner Darkly" :authors #{dick}})
(def books #{cities, wild-seed, lord-of-light,
             deus-irae, ysabel, scanner-darkly}])
(def books #{cities, wild-seed, lord-of-light, deus-irae, ysabel, scanner-darkly})
(check-facts :all)
(has-award? ysabel :world-fantasy)
(has-award? cities :world-fantasy)
(has-award? scanner-darkly :hugo)
(check-facts :all)
(my-some even? [1 3 5 7])
(check-facts :all)
(my-some even? [1 3 5 7])
(check-facts :all)
(my-some even? [1 3 5 7])
(my-some first [[false] [1]])
(use 'midje.repl)
(autotest)
(use 'predicates)
(my-some even? [1 3 5 7]) 
(filter #{1 2} [1 2 3])
(filter #{1 2} [1 2 3 4])
(my-some even? [1 3 5 7]) 
(my-some neg? [1 3 5 0 7 -1 8])
(my-some first [[false] [1]]) 
(check-facts :all)
(my-some first [[false] [1]]) 
(my-some neg? [1 3 5 0 7 -1 8])
(check-facts :all)
(my-some neg? [1 3 5 0 7 8])
(my-some neg? [1 3 5 0 7 -1 8])
(my-some first [[false] [1]]) 
(check-facts :all)
(identity false)
(identity 1)
(identity nil)
(identity bla)
(check-facts :all)
(quot 3 2)
(quot 3 3)
(quot 3 6)
(quot 3 3)
(quot 3 9)
(quot 3 7)
(quot 7 3)
(/ 7 3)
(quot 2 1)
(quot 2 2)
(rm 4 2)
(rem 4 2)
(rem 4 3)
(rem 15 3)
(rem 16 3)
(check-facts :all)
